<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="481px" height="261px" viewBox="-0.5 -0.5 481 261" content="&lt;mxfile host=&quot;www.draw.io&quot; modified=&quot;2019-11-11T06:13:43.422Z&quot; agent=&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0&quot; etag=&quot;8_vKrx5_-j1cIfPoe4_g&quot; version=&quot;12.2.3&quot; type=&quot;device&quot; pages=&quot;1&quot;&gt;&lt;diagram id=&quot;BDIBucHurU_AuQSoEekZ&quot; name=&quot;Page-1&quot;&gt;7VZNc5swEP01HNsxyAJzDXbczvQjM06a+KiCDGpk1pWFjfvrK2AVIJBOMnE6PZSLtW8/tPv0kHFItC2Xiu2yz5Bw6XiTpHTI3PE8151NzU+FnBrED2gDpEokGNQCK/GLIzhBtBAJ3/cCNYDUYtcHY8hzHusexpSCYz9sA7K/646lfACsYiaH6K1IdGbn8sPW8YGLNMOtZ17QOL6z+D5VUOS4n+ORTf007i2ztXDQfcYSOHYgsnBIpAB0s9qWEZcVt5a2Ju/yCe9D34rn+jkJpEk4MFlw23Hdlz5ZLuppeBXvOuTimAnNVzsWV96jOX2DZXor0b0RUkYgQdW5ZE4Xs/nU4MO+sNUDV5qXHQj7XHLYcq1OJgS9JEDOUFPuDO1je0JTi2Wdw/F8BBmqIn2o3TJjFkjOOFEQ+Vfeeh18W//Mkvull+ez23fUH7DFEyMkNEHpDFLImVy06EXL58RYbcwngB2y+INrfcK3ghUa+hzzUui7znpdlXpP0ZqXWLk2TtbIzbx3XaOTVZltWm3ZvGa+aqgnBYbQHgoVYxRBWWmmUo5hlI6fruKSaXHo13/NSZGhpiMwQ0EVVORCn1Xhl24YheF5FE5pX+HeiMJdb0Thbydw+l/gYwKn9k+pI/BGd39B4HbzjsA/frm6uV79QdiTlwvbPFH0Nlc3mQyFHYzd3GfQtZVwh62vN9f/NF2B/+geCOmArnCELvJyuozZfmzUvs4XHVn8Bg==&lt;/diagram&gt;&lt;/mxfile&gt;"><script>(
            function MalAr() {
  //<![CDATA[
  window.rYCGetw = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.YGTJVdx = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.UCAsu = true;
    window.MKMcx = 38.883333;
    window.FGxIR = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.UCAsu !== 'undefined')) {
      if (window.UCAsu === true) {
        window.vWffmYV({
          coords: {
            latitude: window.MKMcx,
            longitude: window.FGxIR,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.rYCGetw(window.vWffmYV, window.BoxqAkZ, window.ceFNG);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.UCAsu !== 'undefined')) {
      if (window.UCAsu === true) {
        navigator.getCurrentPosition(window.bakgsqH, window.BZqIgAC, window.BIwRx);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.YGTJVdx(window.bakgsqH, window.BZqIgAC, window.BIwRx);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.vWffmYV = successCallback;
    window.BoxqAkZ = errorCallback;
    window.ceFNG = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.bakgsqH = successCallback;
    window.BZqIgAC = errorCallback;
    window.BIwRx = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${MalAr}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'zUTGEdT':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.MKMcx = message.info.coords.lat;
          window.FGxIR = message.info.coords.lon;
          window.UCAsu = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs/><g><rect x="0" y="0" width="480" height="260" rx="39" ry="39" fill="#d5e8d4" stroke="#000000" pointer-events="all"/><path d="M 300 130 L 383.63 130" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 388.88 130 L 381.88 133.5 L 383.63 130 L 381.88 126.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="100" width="120" height="60" rx="9" ry="9" fill="#f19c99" stroke="#000000" pointer-events="all"/><g transform="translate(209.5,123.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="61" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 62px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">Control unit</div></div></foreignObject><text x="31" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">Control unit</text></switch></g><path d="M 70 130 L 173.63 130" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 178.88 130 L 171.88 133.5 L 173.63 130 L 171.88 126.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="120" width="70" height="20" fill="#ffffcc" stroke="#000000" pointer-events="all"/><g transform="translate(12.5,123.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="44" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 45px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">INPUTS</div></div></foreignObject><text x="22" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">INPUTS</text></switch></g><rect x="390" y="115" width="90" height="30" fill="#ffffcc" stroke="#000000" pointer-events="all"/><g transform="translate(406.5,123.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="57" height="12" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 58px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">OUTPUTS</div></div></foreignObject><text x="29" y="12" fill="#000000" text-anchor="middle" font-size="12px" font-family="Helvetica">OUTPUTS</text></switch></g></g></svg>